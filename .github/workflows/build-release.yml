---
name: Build and Release Bazzite Gaming Optimization Suite

on:
  push:
    paths:
      - 'VERSION'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.4)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_tag: ${{ steps.get-version.outputs.version_tag }}
      should_release: ${{ steps.check-release.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from VERSION file
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
            VERSION=$(echo $VERSION_TAG | sed 's/^v//')
          else
            VERSION=$(head -n1 VERSION)
            VERSION_TAG="v${VERSION}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Detected version: ${VERSION}"
          echo "Version tag: ${VERSION_TAG}"
      
      - name: Check if release should be created
        id: check-release
        run: |
          # Always build releases when manually triggered or VERSION file changes
          # Tags are created manually and we want to build even if tag exists
          echo "Building release for version ${{ steps.get-version.outputs.version_tag }}"
          echo "should_release=true" >> $GITHUB_OUTPUT

  build-executables:
    needs: detect-version
    if: needs.detect-version.outputs.should_release == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
        architecture: [x86_64]
        include:
          - os: ubuntu-latest
            architecture: x86_64
            target_name: x86_64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install system dependencies (Bazzite-specific)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3-dev \
            python3-pip \
            binutils \
            patchelf \
            upx-ucl
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller psutil
          
      - name: Verify script functionality
        run: |
          python3 bazzite-optimizer.py --version
          python3 bazzite-optimizer.py --list-profiles
          
      - name: Build executable with PyInstaller
        run: |
          pyinstaller \
            --onefile \
            --name "bazzite-optimizer-${{ matrix.target_name }}" \
            --add-data "README.md:." \
            --add-data "VERSION:." \
            --add-data "CHANGELOG.md:." \
            --hidden-import psutil \
            --hidden-import threading \
            --hidden-import re \
            --hidden-import platform \
            --hidden-import subprocess \
            --hidden-import json \
            --hidden-import tempfile \
            --hidden-import hashlib \
            --hidden-import statistics \
            --strip \
            bazzite-optimizer.py
            
      - name: Compress executable with UPX
        run: |
          upx --best --lzma dist/bazzite-optimizer-${{ matrix.target_name }}
          
      - name: Test built executable
        run: |
          chmod +x dist/bazzite-optimizer-${{ matrix.target_name }}
          ./dist/bazzite-optimizer-${{ matrix.target_name }} --version
          ./dist/bazzite-optimizer-${{ matrix.target_name }} --list-profiles
          
      - name: Create auxiliary tools archive
        run: |
          mkdir -p release-artifacts
          tar -czf release-artifacts/bazzite-gaming-suite-auxiliary-${{ matrix.target_name }}.tar.gz \
            gaming-manager-suite.py \
            gaming-monitor-suite.py \
            gaming-maintenance-suite.sh \
            docs/ \
            README.md \
            CHANGELOG.md \
            VERSION \
            LICENSE
            
      - name: Generate minimal build metadata
        run: |
          echo "${{ needs.detect-version.outputs.version }}" > dist/bazzite-optimizer-${{ matrix.target_name }}.version
          echo "$(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" > dist/bazzite-optimizer-${{ matrix.target_name }}.build-date
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bazzite-optimizer-${{ matrix.target_name }}-${{ needs.detect-version.outputs.version }}
          path: |
            dist/bazzite-optimizer-${{ matrix.target_name }}
            dist/bazzite-optimizer-${{ matrix.target_name }}.version
            dist/bazzite-optimizer-${{ matrix.target_name }}.build-date
            release-artifacts/bazzite-gaming-suite-auxiliary-${{ matrix.target_name }}.tar.gz

  create-release:
    needs: [detect-version, build-executables]
    if: needs.detect-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
          
      - name: Check if GitHub Release exists
        id: check-release
        run: |
          if gh release view "${{ needs.detect-version.outputs.version_tag }}" >/dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ needs.detect-version.outputs.version_tag }} already exists (manually created)"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "ERROR: Release ${{ needs.detect-version.outputs.version_tag }} does not exist. Please create tag and release manually first."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload release assets
        run: |
          # Find and upload all artifacts with proper path handling
          echo "🔍 Searching for artifacts to upload..."
          find artifacts/ -name "*" -type f | head -10
          
          for artifact_dir in artifacts/*/; do
            echo "📁 Processing artifact directory: ${artifact_dir}"
            
            # Upload main executable from dist/ subdirectory
            if [[ -f "${artifact_dir}dist/bazzite-optimizer-x86_64" ]]; then
              echo "📦 Uploading main executable..."
              gh release upload "${{ needs.detect-version.outputs.version_tag }}" \
                "${artifact_dir}dist/bazzite-optimizer-x86_64" \
                --clobber
            fi
            
            # Upload version file from dist/ subdirectory
            if [[ -f "${artifact_dir}dist/bazzite-optimizer-x86_64.version" ]]; then
              echo "📝 Uploading version file..."
              gh release upload "${{ needs.detect-version.outputs.version_tag }}" \
                "${artifact_dir}dist/bazzite-optimizer-x86_64.version" \
                --clobber
            fi
            
            # Upload build date file from dist/ subdirectory
            if [[ -f "${artifact_dir}dist/bazzite-optimizer-x86_64.build-date" ]]; then
              echo "📅 Uploading build date file..."
              gh release upload "${{ needs.detect-version.outputs.version_tag }}" \
                "${artifact_dir}dist/bazzite-optimizer-x86_64.build-date" \
                --clobber
            fi
            
            # Upload auxiliary tools archive from release-artifacts/ subdirectory
            for tarball in "${artifact_dir}release-artifacts/"*.tar.gz; do
              if [[ -f "$tarball" ]]; then
                echo "🗃️  Uploading auxiliary archive: $(basename "$tarball")"
                gh release upload "${{ needs.detect-version.outputs.version_tag }}" \
                  "$tarball" \
                  --clobber
              fi
            done
          done
          
          echo "✅ Asset upload process completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Verify build success
        run: |
          echo "✅ Build artifacts ready for release ${{ needs.detect-version.outputs.version_tag }}"
          echo "📦 Artifacts will be uploaded to manually created release"
          echo "🎯 Your manual release notes will remain unchanged"
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Notify completion
        run: |
          echo "✅ Release ${{ needs.detect-version.outputs.version_tag }} created successfully!"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.detect-version.outputs.version_tag }}"
          echo "📦 Assets uploaded and release notes updated with build information"
